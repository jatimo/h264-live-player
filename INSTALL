## Installation instructions

## Server side
## #####

## needs npm and node previously installed. Recommend nvm.

## git
######
## distributed version management used to aid in distribution of this package.
## please use the following line most appropriate for your distribution

#! apt-get install git-core
#! yum install git


## Clone the package repository
#######

## choose a directory that makes sense for your local machine, such as /usr/src or /opt
## the package will be cloned in a subdirectory called h264-live-player

#! cd /usr/src
#! git clone https://github.com/jatimo/h264-live-player.git
#! cd h264-live-player
#! npm install

## Modify service-settings.json appropriately. 

## INFO:

## The "private key" should be the same on clients and server. This data is not transmitted but is digested
## cryptographically. The resulting digest hash is transmitted and used for comparison for auth purposes.


## The below command will run the service. 

#! node ./raspi-relay-server.js


## RESTRICTIONS
## The server and client resolution settings need to be the same. All remote feeders must use the same resolution settings. 


## CLIENT SIDE Installation
##############

## For node dependency, a .deb pakage is provided for convenience. The repo needs to be installed as with the server side.

## Run on Raspi Zero:

#! cd /usr/src
#! apt-get install -y git 
#! git clone https://github.com/jatimo/h264-live-player.git
#! cd h264-live-player
#! dpkg -i node_latest_armhf.deb
#! npm install

## Modify service-settings.json as with server side.

## To run the video feeder service:

#! node ./feeder.js

## Note that if past processes exited ungracefully, there may be a zombie process of raspivid which prevents you from starting the feeder.
## This will be indicated by an error to start with the following output:

## Failure 64
## or 
## Failure 70

## To remedy this situation, kill any zombie raspivid processes and restart the service:

#! killall raspivid; node ./feeder.js

## To view a list of the available stream, visit http://server_ip:port/streams

## This page must be reloaded as is with this demo, but could also be used as an API/AJAX call
## to dynamically refresh an element on another page.




