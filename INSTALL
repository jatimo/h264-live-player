## Installation instructions

## Server side
## Install Dependencies
#############

## nvm
######
## used to manage multiple installed versions of nodejs.

#! curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
#! nvm install node
#! nvm use node

## git
######
## distributed version management used to aid in distribution of this package.
## please use the following line most appropriate for your distribution

#! apt-get install git-core
#! yum install git


## Clone the package repository
#######

## choose a directory that makes sense for your local machine, such as /usr/src or /opt
## the package will be cloned in a subdirectory called h264-live-player

#! cd /usr/src
#! git clone https://github.com/jatimo/h264-live-player.git
#! cd h264-live-player
#! npm install

## Modify service-settings.json appropriately. 

## INFO:
## The "intra" setting determines how many frames are sent before a 
## key frame will be added. When a new client starts a live stream without a key frame yet available, they may experience
## momentary blue or green screens, or garbled video data until a new key frame is sent. A setting of 1 will ensure every
## frame is a key frame (never garbled video), at the expense of much lower quality and/or increased bandwidth. A setting
## of 12 for 25fps ensures  there is never longer than about 500ms garbled video at worst, with acceptable video quality.


## The package installed on the server side is responsible for connecting to the RasPi in the config 
## settings, and receiving its raw video data. It parses the NAL frames so that the video can be delivered one frame
## at a time to the client (in the browser). If the browser decoder is unable to keep up with the data rate, it 
## will drop frames, so be sure to set a framerate and screen geometry that is reasonable for the intended target machines.
## Javascript based h264 decoding is not the fastest. My i5 quad core 3.4GHz occasionally dropped frames with
## a 1280x720 @ 25fps. Resolution will have the most major impact on performance. 

## The below command will run the service. 

#! node ./raspi-relay-server.js

## The server on startup will output an appropriate line for use on the raspberry pi. The raspberry pi host 
## does not need any special software to function in this role beyond the raspivid utility. 







